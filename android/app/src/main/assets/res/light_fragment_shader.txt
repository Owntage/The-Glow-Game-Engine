#version 120

varying vec2 pos_vec;
varying vec2 tex_vec;

uniform vec2 offset;
uniform vec2 light_pos[8];
uniform vec3 light_color[8];
uniform float light_intensity[8];

uniform vec2 shadow_pos[8];
uniform vec2 shadow_size[8];


uniform int sources_size;
uniform int shadows_size;

#define PI 3.141593 //good enough for engineering
#define LIGHT_RADIUS 32
#define EPS = 0.001



float my_abs(float a)
{
	if (a <= 0.0) return -a;
	return a;
}

void main(void)
{
	float len_power = 2;
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	
	for (int i = 0; i < sources_size; i++)
	{
		float multiplier;
		float len = length(pos_vec + offset - light_pos[i]) / 32;
		if (light_intensity[i] <= 0.0)
		{
			len = len * 5;
		}
		if (len / my_abs(light_intensity[i]) < 1 && my_abs(light_intensity[i]) >= 1) len = my_abs(light_intensity[i]);
		
		if (false)
		{
			multiplier = 0.2 / len;
		}
		else
		{
			if (light_intensity[i] <= 0.0)
			{
				multiplier = 1 / (len * len);
			}
			else
			{
				multiplier = 0.4 / (len * my_abs(light_intensity[i]));
			}
		}
		
		if(multiplier <= 0.001)
		{
			continue;
		}
				
		color.r += light_color[i].r * multiplier;
		color.g += light_color[i].g * multiplier;
		color.b += light_color[i].b * multiplier;
		
	}
	
	gl_FragColor = color;
}